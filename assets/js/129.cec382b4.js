(window.webpackJsonp=window.webpackJsonp||[]).push([[129],{497:function(t,e,a){"use strict";a.r(e);var o=a(49),s=Object(o.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"image-cache-图像缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#image-cache-图像缓存"}},[t._v("#")]),t._v(" Image Cache - 图像缓存")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),a("p",[t._v("Cornerstone 将 "),a("strong",[a("RouterLink",{attrs:{to:"/zh/concepts/images.html"}},[t._v("Images - 图像")])],1),t._v(" 保存在"),a("strong",[t._v("图像缓存")]),t._v(" 里，以跟踪内存的使用情况")])]),t._v(" "),a("p",[t._v("当图像 "),a("RouterLink",{attrs:{to:"/zh/api.html#imageloadobject"}},[t._v("Image Load Object - 加载对象")]),t._v(" 中的 "),a("code",[t._v("Promise")]),t._v(" 解析时，生成的图像通过 Cornerstone 存储在图像缓存模块中的对象中。它被设置为作为最近最少使用的（LRU）缓存运行。")],1),t._v(" "),a("p",[t._v("最初，调用 "),a("RouterLink",{attrs:{to:"/zh/api.html#loadimage"}},[t._v("loadImage")]),t._v(" 时，缓存中会填充一个占位符，用于记录大小为0的缓存图像。当跟踪图像加载的 "),a("code",[t._v("Promise")]),t._v(" 被 "),a("code",[t._v("resolve")]),t._v(" 后，记录的大小将更新为以字节为单位的实际大小。如果加载失败，占位符将从缓存中删除。")],1),t._v(" "),a("p",[t._v("开发者可以：")]),t._v(" "),a("ul",[a("li",[t._v("设置最大缓存字节, 默认 1 GB ("),a("RouterLink",{attrs:{to:"/zh/api.html#setmaximumsizebytes"}},[t._v("setMaximumSizeBytes")]),t._v(")")],1),t._v(" "),a("li",[t._v("手动释放所有图像的缓存 ("),a("RouterLink",{attrs:{to:"/zh/api.html#purgecache"}},[t._v("purgeCache")]),t._v(")")],1),t._v(" "),a("li",[t._v("获取缓存简要信息 ("),a("RouterLink",{attrs:{to:"/zh/api.html#getcacheinfo"}},[t._v("getCacheInfo")]),t._v(")")],1),t._v(" "),a("li",[t._v("更改特定图像的录入缓存大小 ("),a("RouterLink",{attrs:{to:"/zh/api.html#changeimageidcachesize"}},[t._v("changeImageIdCacheSize")]),t._v(")")],1)])])}),[],!1,null,null,null);e.default=s.exports}}]);